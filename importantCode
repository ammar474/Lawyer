// import express from 'express';
// import { SignUp } from './models/SignUpModel'; // Assuming the schema is in models folder

// const app = express();
// app.use(express.json()); // Middleware to parse JSON request bodies

// // POST /api/signup with file uploads
// app.post('/api/signup', upload.fields([
//     { name: 'cnicFrontImage', maxCount: 1 },
//     { name: 'cnicBackImage', maxCount: 1 },
//     { name: 'barCouncilImage', maxCount: 1 }
// ]), async (req, res) => {
//     try {
//         const { fullName, email, phone, cnic, barCouncilId, role } = req.body;

//         // Check if all required files are uploaded
//         if (!req.files || !req.files.cnicFrontImage || !req.files.cnicBackImage || !req.files.barCouncilImage) {
//             return res.status(400).json({ error: 'All images are required' });
//         }

//         // Create a new signup record
//         const newSignUp = new SignUp({
//             fullName,
//             email,
//             phone,
//             cnic,
//             barCouncilId,
//             role,
//             cnicFrontImage: req.files.cnicFrontImage[0].path, // File path
//             cnicBackImage: req.files.cnicBackImage[0].path,   // File path
//             barCouncilImage: req.files.barCouncilImage[0].path // File path
//         });

//         // Save the signup to the database
//         await newSignUp.save();

//         res.status(201).json({ message: 'Sign-up successful', newSignUp });
//     } catch (error) {
//         if (error.code === 11000) { // Check for duplicate email, CNIC, or barCouncilId
//             return res.status(400).json({ error: 'Duplicate entry. Email, CNIC or Bar Council ID already exists' });
//         }
//         res.status(500).json({ error: 'Failed to sign up' });
//     }
// });


const authorize = (roles) => {
    return (req, res, next) => {
        const userRole = req.user.role; // Assume user role is added to req after JWT verification

        if (!roles.includes(userRole)) {
            return res.status(403).json({ message: 'Access denied.' });
        }

        next();
    };
};

// Middleware to check roles
function authorizeRoles(...allowedRoles) {
    return (req, res, next) => {
        const userRole = req.user.role; // Assuming req.user is set after authentication

        // Check if user's role is allowed
        if (!allowedRoles.includes(userRole)) {
            return res.status(403).json({ message: "Access denied." });
        }

        next();
    };
}

// Example routes
app.post('/api/cases', authorizeRoles('lawyer'), (req, res) => {
    // Only lawyers can add cases
    // Code for adding cases
});

app.get('/api/cases', authorizeRoles('lawyer', 'paralegal', 'assistant'), (req, res) => {
    // Lawyers, paralegals, and assistants can view cases
    // Code for fetching cases
});

app.put('/api/cases/:id', authorizeRoles('lawyer', 'paralegal'), (req, res) => {
    // Only lawyers and paralegals can update cases
    // Code for updating cases
});



import mongoose from "mongoose";

// Case Type Schema
const CaseTypeSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true,
  },
  subcategories: [{
    type: String, // Alternatively, you can create a separate SubCategory model
  }],
});

const CaseType = mongoose.model('CaseType', CaseTypeSchema);

// New Case Schema
const NewCaseSchema = new mongoose.Schema({
  caseType: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'CaseType',
    required: true,
  },
  caseSubCategory: {
    type: String, // Store subcategory name or can be an ObjectId if you have a SubCategory model
    required: true,
  },
  party: {
    type: String,
    required: true,
  },
  clientName: {
    type: String,
    required: true,
  },
  title: {
    type: String,
    required: true,
  },
  caseDescription: {
    type: String,
    required: true,
  },
  hearingDate: {
    type: Date,
    required: true,
  },
  caseStatus: {
    type: String,
    enum: ["open", "in-progress", "closed"],
    default: "open",
  },
  caseNumber: {
    type: Number,
    required: true,
    unique: true, // Ensure case number is unique
  },
  firNumber: {
    type: Number,
    required: true,
    unique: true, // Ensure FIR number is unique
  },
  firYear: {
    type: Number,
    required: true,
  },
  policeStation: {
    type: String,
    required: true,
  },
  offence: {
    type: String,
    required: true,
  },
  decidedBy: {
    type: String,
    required: true,
  },
  decisionDate: {
    type: Date,
    required: true,
  },
  decisionType: {
    type: String,
    required: true,
  },
  outCome: {
    type: String,
    enum: ["Acquitted", "Convicted"],
    required: false,
  },
  shortOrder: {
    type: String,
    required: false,
  },
  caseDocuments: [{
    filePath: {
      type: String,
      required: false,
    },
 
  }],
  lawyerId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Lawyer',
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});
enum: ["pending", "completed", "adjourned"],

export const NewCase = mongoose.model("NewCase", NewCaseSchema);
export const CaseTypeModel = CaseType;

